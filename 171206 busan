rm(list=ls())
setwd("C:/Users/cho/Desktop/Rcode") ##저장위치 지정##
library(dplyr)

set.seed(111) 

file<-read.csv("busan_201702_sgis.csv",header=T)
popdata<-file[,4:27]
dong=207
days=28

data<-data.frame((matrix(nrow=dong,ncol=days*24)))

for(j in 0:(dong-1)){
  for(i in 1:(days)){
    first<-(24*(i-1))+1
    last<-24*i
    data[j+1,first:last]<-slice(popdata,(28*j)+i)
}}


data<-data[,-c(327:331)]  ##omitted data points

dongnames<-unique(file[,1])
GU<-read.csv("dong_gu.csv",header=T) 

data<-cbind(dongnames,data)
data<-inner_join(data,GU,by="dongnames")
data<-cbind(data$GUnames,data)
data<-data[,-c(2,ncol(data))]
rownames(data)<-dongnames

write.csv(data,"busan_1702_processed.csv")


#########################################################################################
#########################################################################################
rm(list=ls())
### Normalizing from 0 to 1
setwd("C:/Users/cho/Desktop/Rcode") ##저장위치 지정##
library(scales)
set.seed(555) 

data<-read.csv("busan_1702_processed.csv",header=T, row.names=1)
data_norm<-data[,-1] #delete GU names
data_norm<-t(apply(data_norm, 1, function(x)(x-min(x))/(max(x)-min(x)))) #Min-Max Normalization
#write.csv(data_norm,"norm1.csv")

### t-SNE
library(Rtsne)
Rtsne_res <- Rtsne(data_norm[,1:667], check_duplicates = FALSE, pca = FALSE, perplexity=5, theta=0, dims=2, max_iter=50000)

cols <- rainbow(length(unique(data[,1]))) #by 행정구
addinfo<-read.csv("busan_addinfo.csv",header=T)
plot(Rtsne_res$Y, t='p',col=cols[data[,1]], cex=.5, lwd=2)
text(Rtsne_res$Y, labels=rownames(data), cex=0.5)
#text(Rtsne_res$Y, labels=addinfo[,2], cex=1)


### FIND NUMBER OF CLUSTERS #
library(clValid)
internal <- clValid(Rtsne_res$Y, 2:20, clMethods=c("hierarchical","kmeans","pam"),validation="internal")
summary(internal)
plot(internal,measure="Silhouette",legendLoc="bottomright")


### ASSIGN CLUSTERS 
#from https://blog.datascienceheroes.com/playing-with-dimensions-from-clustering-pca-t-sne-to-carl-sagan/
library(ggplot2)
library(gridExtra) 

fit_kmeans=kmeans(scale(Rtsne_res$Y), 9)   ### NUBMER OF CLUSTERS
fit_pam=pam(scale(Rtsne_res$Y),11)          ### NUMBER OF CLUSTERS
fit_hi=hclust(dist(scale(Rtsne_res$Y)))

#plot(fit_hi, labels = NULL, hang = 0.1, check = TRUE, axes = TRUE, frame.plot = FALSE, ann = TRUE, main = "Cluster Dendrogram", sub = NULL, xlab = NULL, ylab = "Height")

data4cluster<-as.data.frame(Rtsne_res$Y)
data4cluster$cl_kmeans=factor(fit_kmeans$cluster)
data4cluster$cl_pam=factor(fit_pam$cluster)
data4cluster$cl_hi=factor(cutree(fit_hi, k=11))    ### NUMBER OF CLUSTERS
data4cluster$addinfo<-addinfo[,2]
                          

plot_h<- ggplot(data=data4cluster, aes_string(x="V1", y="V2", color="cl_hi", shape="cl_hi")) + 
  geom_point(size=1.3) +  
  scale_shape_manual(values=c(4,15,16,4,15,16,4,15,16,4,15)) +
  xlab("") + ylab("") +
  theme(axis.text.x=element_blank(),axis.text.y=element_blank(),plot.title=element_text(hjust=0.5))+
  ggtitle("Clusters of Busan-dong by Hclust")
plot_h

## WITH LABELS
plot_h<- ggplot(data=data4cluster, aes_string(x="V1", y="V2", color="cl_hi", label="addinfo",shape="cl_hi")) + 
  geom_point(size=1.3) +  
  scale_shape_manual(values=c(4,15,16,4,15,16,4,15,16,4,15)) +
  xlab("") + ylab("") +
  theme(axis.text.x=element_blank(),axis.text.y=element_blank(),plot.title=element_text(hjust=0.5))+
  ggtitle("Clusters of Busan-dong by Hclust")+
  geom_text(col="black")
plot_h


plot_p<- ggplot(data=data4cluster, aes_string(x="V1", y="V2", color="cl_pam", label="addinfo")) + 
  geom_point(size=1) +
  xlab("") + ylab("") +
  theme(axis.text.x=element_blank(),axis.text.y=element_blank(),plot.title=element_text(hjust=0.5))+
  ggtitle("Clusters of Busan-dong by K-medoid")+
  geom_text(col="black")







### Actual value scale
min_max_pop <-as.data.frame(matrix(nrow=nrow(data)))
rownames(min_max_pop) <-rownames(data)
min_max_pop$max <- apply(data[,-1],1,max)
min_max_pop$min <- apply(data[,-1],1,min)
min_max_pop$avg <- apply(data[,-1],1,mean)
min_max_pop[,1] <-  data4cluster$cl_hi
min_max_pop[,2] <- round(rescale(min_max_pop[,2], to = c(0, 1)),digits=1)
min_max_pop[,3] <- round(rescale(min_max_pop[,3], to = c(0, 1)),digits=1)
min_max_pop[,4] <- round(rescale(min_max_pop[,4], to = c(0, 1)),digits=1)
#write.csv(min_max_pop, "actual_scale.csv")


















# OLD VERSION for ref #
####################################################################
###t-SNE

setwd("C:/Users/cho/Desktop/Rcode") ##저장위치 지정##
set.seed(777) 

data<-read.csv("busan_1702_processed.csv",header=T, row.names=1)

#library(tsne)
library(Rtsne)

#Rtsne_res <- Rtsne(data[,2:668], check_duplicates = FALSE, pca = TRUE, perplexity=5, theta=0, dims=2, max_iter=10000)

Rtsne_res <- Rtsne(data[,2:668], check_duplicates = FALSE, pca = FALSE, perplexity=5, theta=0, dims=2, max_iter=1000)

cols <- rainbow(length(unique(data[,1]))) #by 행정구
plot(Rtsne_res$Y, t='p',col=cols[data[,1]], cex=.5, lwd=2)
text(Rtsne_res$Y, labels=rownames(data), cex=0.5)

addinfo<-read.csv("busan_addinfo.csv",header=T)
text(Rtsne_res$Y, labels=addinfo[,2], cex=1.5)

require(rgl)
Rtsne_res_3d <- Rtsne(data[,2:668], check_duplicates = FALSE, pca = TRUE, perplexity=5, theta=0.5, dims=3)
plot3d(Rtsne_res_3d$Y, col=cols[data[,1]])
text(Rtsne_res$Y, labels=rownames(data))


#plot_cluster=function(data, var_cluster, palette)  
#{
#  ggplot(data, aes_string(x="V1", y="V2", color=var_cluster)) +
#    geom_point(size=1) +
#    guides(colour=guide_legend(override.aes=list(size=6))) +
#    xlab("") + ylab("") +
#    ggtitle("") +
#    theme_light(base_size=20) +
#    theme(axis.text.x=element_blank(),
#          axis.text.y=element_blank(),
#          legend.direction = "horizontal", 
#          legend.position = "bottom",
#          legend.box = "horizontal") + 
#    scale_colour_brewer(palette = palette) }
#plot_h=plot_cluster(data4cluster,"cl_hi","Paired")
#plot_h
#plot_k=plot_cluster(data4cluster,"cl_kmeans","Paired")
#grid.arrange(plot_k, plot_h,  ncol=2) 


### PCA 

pca_result <- prcomp(data_norm[,1:667],tol=0.01)
summary(pca_result)
#print(pca_result)
#plot(pca_result, type = "l")
#from https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_pca.html
require(ggfortify)
autoplot(pca_result, label=TRUE, label.size=2, shape = TRUE, loadings=FALSE, col=cols[data[,1]])


### SOM
library(kohonen)

datamat<-as.matrix(data)

som_grid <- somgrid(xdim = 10, ydim=10, topo="hexagonal")

som_model <- som(datamat[,1:667], 
                 grid=som_grid, 
                 rlen=1000, 
                 alpha=c(0.05,0.01), 
                 keep.data = TRUE,
                 normalizeDataLayers = TRUE)

plot(som_model, type="changes")
plot(som_model, type="count", label=label)
plot(som_model, type="dist.neighbours") #U-MATRIX                                     
plot(som_model, type="codes") #same as default type

label <- rownames(data)
plot(som_model, type="mapping", label=label)
